{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":63056,"databundleVersionId":9094797,"sourceType":"competition"},{"sourceId":84733,"sourceType":"modelInstanceVersion","modelInstanceId":71178,"modelId":96173},{"sourceId":85268,"sourceType":"modelInstanceVersion","modelInstanceId":71178,"modelId":96173}],"dockerImageVersionId":30747,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nimport re\nimport pandas as pd\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier, Pool","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:39:08.043955Z","iopub.execute_input":"2024-08-01T18:39:08.044820Z","iopub.status.idle":"2024-08-01T18:39:10.773710Z","shell.execute_reply.started":"2024-08-01T18:39:08.044785Z","shell.execute_reply":"2024-08-01T18:39:10.772935Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom torch.utils.data import Dataset, DataLoader, random_split, WeightedRandomSampler, Subset\nfrom torchvision import transforms\nimport pandas as pd\nimport h5py\nimport torch\nimport torchvision\nfrom torch.optim.lr_scheduler import StepLR\nimport lightgbm as lgb\nfrom PIL import Image\nfrom io import BytesIO\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, precision_score, recall_score\nfrom sklearn.metrics import ConfusionMatrixDisplay, f1_score\nimport re\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:39:10.775612Z","iopub.execute_input":"2024-08-01T18:39:10.776396Z","iopub.status.idle":"2024-08-01T18:39:13.703365Z","shell.execute_reply.started":"2024-08-01T18:39:10.776360Z","shell.execute_reply":"2024-08-01T18:39:13.702359Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using device:\", device)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:39:13.704673Z","iopub.execute_input":"2024-08-01T18:39:13.705397Z","iopub.status.idle":"2024-08-01T18:39:13.731005Z","shell.execute_reply.started":"2024-08-01T18:39:13.705363Z","shell.execute_reply":"2024-08-01T18:39:13.729979Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"def score(solution: np.ndarray, submission: np.ndarray, min_tpr: float=0.80) -> float:\n    v_gt = abs(solution-1)\n    v_pred = np.array([1.0 - x for x in submission])\n    max_fpr = abs(1-min_tpr)\n    partial_auc_scaled = roc_auc_score(v_gt, v_pred, max_fpr=max_fpr)\n    # change scale from [0.5, 1.0] to [0.5 * max_fpr**2, max_fpr]\n    # https://math.stackexchange.com/questions/914823/shift-numbers-into-a-different-range\n    partial_auc = 0.5 * max_fpr**2 + (max_fpr - 0.5 * max_fpr**2) / (1.0 - 0.5) * (partial_auc_scaled - 0.5)\n    \n    return(partial_auc)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:39.094235Z","iopub.execute_input":"2024-08-01T18:40:39.094646Z","iopub.status.idle":"2024-08-01T18:40:39.101231Z","shell.execute_reply.started":"2024-08-01T18:40:39.094616Z","shell.execute_reply":"2024-08-01T18:40:39.100261Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"def pauc_80(preds, data):\n    score_value = score(data.get_label(), preds, min_tpr=0.8)\n    return 'pauc_80', score_value, True","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:39.309618Z","iopub.execute_input":"2024-08-01T18:40:39.310476Z","iopub.status.idle":"2024-08-01T18:40:39.315103Z","shell.execute_reply.started":"2024-08-01T18:40:39.310443Z","shell.execute_reply":"2024-08-01T18:40:39.313932Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nclass CatBoostEvalMetricPAUC80(object):\n    def __init__(self, min_tpr=0.80):\n        self.min_tpr = min_tpr\n\n    def get_final_error(self, error, weight):\n        # In case you need to modify final error handling\n        return error\n\n    def is_max_optimal(self):\n        # Define whether larger metric value is better\n        return True\n\n    def score(self, solution, submission):\n        v_gt = abs(solution - 1)\n        v_pred = np.array([1.0 - x for x in submission])\n        max_fpr = abs(1 - self.min_tpr)\n        partial_auc_scaled = roc_auc_score(v_gt, v_pred, max_fpr=max_fpr)\n        partial_auc = 0.5 * max_fpr**2 + (max_fpr - 0.5 * max_fpr**2) / (1.0 - 0.5) * (partial_auc_scaled - 0.5)\n        return partial_auc\n\n    def evaluate(self, approxes, target, weight):\n        assert len(approxes) == 1\n        preds = np.array(approxes[0])\n        target = np.array(target)\n        correlation = np.corrcoef(target, preds)[0, 1]\n        pauc_80_score = self.score(target, preds)\n        return correlation, pauc_80_score\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:39.486151Z","iopub.execute_input":"2024-08-01T18:40:39.486822Z","iopub.status.idle":"2024-08-01T18:40:39.495745Z","shell.execute_reply.started":"2024-08-01T18:40:39.486792Z","shell.execute_reply":"2024-08-01T18:40:39.494791Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"class ISICDataset(Dataset):\n    def __init__(self, hdf5_file, isic_ids, metadata, targets=None, transform=None):\n        self.hdf5_file = hdf5_file\n        self.isic_ids = isic_ids\n        self.targets = targets\n        self.transform = transform\n        self.metadata = metadata\n        \n    def __len__(self):\n        return len(self.isic_ids)\n    \n    def __getitem__(self, idx):\n        isic_id = self.isic_ids[idx]\n        image = Image.open(BytesIO(self.hdf5_file[isic_id][()])) # convert byte array to PIL image\n        meta = torch.tensor(self.metadata.iloc[idx].tolist(), dtype=torch.float32)\n        if self.transform:\n            image = self.transform(image)\n        if self.targets is not None:\n            target = self.targets[idx]\n            return image, meta, target\n        else:\n            return image, meta\n        \n    def get_target(self, idx):\n        return int(self.targets[idx])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:39.683510Z","iopub.execute_input":"2024-08-01T18:40:39.684441Z","iopub.status.idle":"2024-08-01T18:40:39.692262Z","shell.execute_reply.started":"2024-08-01T18:40:39.684410Z","shell.execute_reply":"2024-08-01T18:40:39.691291Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# new features (credit Sinan Calisir)\ndef feature_engineering(df):\n    # New features to try...\n    df[\"lesion_size_ratio\"]              = df[\"tbp_lv_minorAxisMM\"] / df[\"clin_size_long_diam_mm\"]\n    df[\"lesion_shape_index\"]             = df[\"tbp_lv_areaMM2\"] / (df[\"tbp_lv_perimeterMM\"] ** 2)\n    df[\"hue_contrast\"]                   = (df[\"tbp_lv_H\"] - df[\"tbp_lv_Hext\"]).abs()\n    df[\"luminance_contrast\"]             = (df[\"tbp_lv_L\"] - df[\"tbp_lv_Lext\"]).abs()\n    df[\"lesion_color_difference\"]        = np.sqrt(df[\"tbp_lv_deltaA\"] ** 2 + df[\"tbp_lv_deltaB\"] ** 2 + df[\"tbp_lv_deltaL\"] ** 2)\n    df[\"border_complexity\"]              = df[\"tbp_lv_norm_border\"] + df[\"tbp_lv_symm_2axis\"]\n    df[\"color_uniformity\"]               = df[\"tbp_lv_color_std_mean\"] / df[\"tbp_lv_radial_color_std_max\"]\n    \n    df[\"3d_position_distance\"]           = np.sqrt(df[\"tbp_lv_x\"] ** 2 + df[\"tbp_lv_y\"] ** 2 + df[\"tbp_lv_z\"] ** 2) \n    df[\"perimeter_to_area_ratio\"]        = df[\"tbp_lv_perimeterMM\"] / df[\"tbp_lv_areaMM2\"]\n    df[\"area_to_perimeter_ratio\"]        = df[\"tbp_lv_areaMM2\"] / df[\"tbp_lv_perimeterMM\"]\n    df[\"lesion_visibility_score\"]        = df[\"tbp_lv_deltaLBnorm\"] + df[\"tbp_lv_norm_color\"]\n    df[\"symmetry_border_consistency\"]    = df[\"tbp_lv_symm_2axis\"] * df[\"tbp_lv_norm_border\"]\n    df[\"consistency_symmetry_border\"]    = df[\"tbp_lv_symm_2axis\"] * df[\"tbp_lv_norm_border\"] / (df[\"tbp_lv_symm_2axis\"] + df[\"tbp_lv_norm_border\"])\n    \n    df[\"color_consistency\"]              = df[\"tbp_lv_stdL\"] / df[\"tbp_lv_Lext\"]\n    df[\"consistency_color\"]              = df[\"tbp_lv_stdL\"] * df[\"tbp_lv_Lext\"] / (df[\"tbp_lv_stdL\"] + df[\"tbp_lv_Lext\"])\n    df[\"size_age_interaction\"]           = df[\"clin_size_long_diam_mm\"] * df[\"age_approx\"]\n    df[\"hue_color_std_interaction\"]      = df[\"tbp_lv_H\"] * df[\"tbp_lv_color_std_mean\"]\n    df[\"lesion_severity_index\"]          = (df[\"tbp_lv_norm_border\"] + df[\"tbp_lv_norm_color\"] + df[\"tbp_lv_eccentricity\"]) / 3\n    df[\"shape_complexity_index\"]         = df[\"border_complexity\"] + df[\"lesion_shape_index\"]\n    df[\"color_contrast_index\"]           = df[\"tbp_lv_deltaA\"] + df[\"tbp_lv_deltaB\"] + df[\"tbp_lv_deltaL\"] + df[\"tbp_lv_deltaLBnorm\"]\n    \n    df[\"log_lesion_area\"]                = np.log(df[\"tbp_lv_areaMM2\"] + 1)\n    df[\"normalized_lesion_size\"]         = df[\"clin_size_long_diam_mm\"] / df[\"age_approx\"]\n    df[\"mean_hue_difference\"]            = (df[\"tbp_lv_H\"] + df[\"tbp_lv_Hext\"]) / 2\n    df[\"std_dev_contrast\"]               = np.sqrt((df[\"tbp_lv_deltaA\"] ** 2 + df[\"tbp_lv_deltaB\"] ** 2 + df[\"tbp_lv_deltaL\"] ** 2) / 3)\n    df[\"color_shape_composite_index\"]    = (df[\"tbp_lv_color_std_mean\"] + df[\"tbp_lv_area_perim_ratio\"] + df[\"tbp_lv_symm_2axis\"]) / 3\n    df[\"3d_lesion_orientation\"]          = np.arctan2(df[\"tbp_lv_y\"], df[\"tbp_lv_x\"])\n    df[\"overall_color_difference\"]       = (df[\"tbp_lv_deltaA\"] + df[\"tbp_lv_deltaB\"] + df[\"tbp_lv_deltaL\"]) / 3\n    \n    df[\"symmetry_perimeter_interaction\"] = df[\"tbp_lv_symm_2axis\"] * df[\"tbp_lv_perimeterMM\"]\n    df[\"comprehensive_lesion_index\"]     = (df[\"tbp_lv_area_perim_ratio\"] + df[\"tbp_lv_eccentricity\"] + df[\"tbp_lv_norm_color\"] + df[\"tbp_lv_symm_2axis\"]) / 4\n    df[\"color_variance_ratio\"]           = df[\"tbp_lv_color_std_mean\"] / df[\"tbp_lv_stdLExt\"]\n    df[\"border_color_interaction\"]       = df[\"tbp_lv_norm_border\"] * df[\"tbp_lv_norm_color\"]\n    df[\"size_color_contrast_ratio\"]      = df[\"clin_size_long_diam_mm\"] / df[\"tbp_lv_deltaLBnorm\"]\n    df[\"age_normalized_nevi_confidence\"] = df[\"tbp_lv_nevi_confidence\"] / df[\"age_approx\"]\n    df[\"color_asymmetry_index\"]          = df[\"tbp_lv_radial_color_std_max\"] * df[\"tbp_lv_symm_2axis\"]\n    \n    df[\"3d_volume_approximation\"]        = df[\"tbp_lv_areaMM2\"] * np.sqrt(df[\"tbp_lv_x\"]**2 + df[\"tbp_lv_y\"]**2 + df[\"tbp_lv_z\"]**2)\n    df[\"color_range\"]                    = (df[\"tbp_lv_L\"] - df[\"tbp_lv_Lext\"]).abs() + (df[\"tbp_lv_A\"] - df[\"tbp_lv_Aext\"]).abs() + (df[\"tbp_lv_B\"] - df[\"tbp_lv_Bext\"]).abs()\n    df[\"shape_color_consistency\"]        = df[\"tbp_lv_eccentricity\"] * df[\"tbp_lv_color_std_mean\"]\n    df[\"border_length_ratio\"]            = df[\"tbp_lv_perimeterMM\"] / (2 * np.pi * np.sqrt(df[\"tbp_lv_areaMM2\"] / np.pi))\n    df[\"age_size_symmetry_index\"]        = df[\"age_approx\"] * df[\"clin_size_long_diam_mm\"] * df[\"tbp_lv_symm_2axis\"]\n    df[\"index_age_size_symmetry\"]        = df[\"age_approx\"] * df[\"tbp_lv_areaMM2\"] * df[\"tbp_lv_symm_2axis\"]\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:40.252424Z","iopub.execute_input":"2024-08-01T18:40:40.252798Z","iopub.status.idle":"2024-08-01T18:40:40.272472Z","shell.execute_reply.started":"2024-08-01T18:40:40.252769Z","shell.execute_reply":"2024-08-01T18:40:40.271522Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"data_path = \"/kaggle/input/isic-2024-challenge/\"\ntrain_path = data_path + \"train-metadata.csv\"\ntest_path = data_path + \"test-metadata.csv\"\n\ntrain_meta = pd.read_csv(train_path)\ntest_meta = pd.read_csv(test_path)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:40.529978Z","iopub.execute_input":"2024-08-01T18:40:40.530657Z","iopub.status.idle":"2024-08-01T18:40:45.399252Z","shell.execute_reply.started":"2024-08-01T18:40:40.530625Z","shell.execute_reply":"2024-08-01T18:40:45.398194Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_123/2499741512.py:5: DtypeWarning: Columns (51,52) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_meta = pd.read_csv(train_path)\n","output_type":"stream"}]},{"cell_type":"code","source":"drop_cols = ['target', 'isic_id', 'patient_id', 'lesion_id', 'iddx_full', 'iddx_1', 'iddx_2', 'iddx_3', 'iddx_4', 'iddx_5', 'mel_mitotic_index', 'mel_thick_mm', 'tbp_lv_dnn_lesion_confidence', 'attribution', 'copyright_license']\n\nX = train_meta.drop(columns=drop_cols)\ny = train_meta['target']  ","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:45.401256Z","iopub.execute_input":"2024-08-01T18:40:45.402030Z","iopub.status.idle":"2024-08-01T18:40:45.446917Z","shell.execute_reply.started":"2024-08-01T18:40:45.401993Z","shell.execute_reply":"2024-08-01T18:40:45.446126Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"num_columns = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\ncat_columns = X.select_dtypes(include=['object']).columns.tolist()\n\ntest_isic_ids = test_meta[\"isic_id\"].tolist()\ntest_X = test_meta.filter(cat_columns + num_columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:45.448203Z","iopub.execute_input":"2024-08-01T18:40:45.448567Z","iopub.status.idle":"2024-08-01T18:40:45.519523Z","shell.execute_reply.started":"2024-08-01T18:40:45.448536Z","shell.execute_reply":"2024-08-01T18:40:45.518709Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# one-hot encoding\nX = pd.get_dummies(X, columns=cat_columns)\ntest_X = pd.get_dummies(test_X, columns=cat_columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:45.522180Z","iopub.execute_input":"2024-08-01T18:40:45.522977Z","iopub.status.idle":"2024-08-01T18:40:45.934203Z","shell.execute_reply.started":"2024-08-01T18:40:45.522937Z","shell.execute_reply":"2024-08-01T18:40:45.933380Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"X = X.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntest_X = test_X.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:45.935252Z","iopub.execute_input":"2024-08-01T18:40:45.935512Z","iopub.status.idle":"2024-08-01T18:40:45.974051Z","shell.execute_reply.started":"2024-08-01T18:40:45.935490Z","shell.execute_reply":"2024-08-01T18:40:45.973045Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"X = feature_engineering(X)\ntest_X = feature_engineering(test_X)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:45.975269Z","iopub.execute_input":"2024-08-01T18:40:45.975547Z","iopub.status.idle":"2024-08-01T18:40:46.123746Z","shell.execute_reply.started":"2024-08-01T18:40:45.975523Z","shell.execute_reply":"2024-08-01T18:40:46.122617Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"X, test_X = X.align(test_X, join='outer', axis=1, fill_value=0)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:46.125010Z","iopub.execute_input":"2024-08-01T18:40:46.125358Z","iopub.status.idle":"2024-08-01T18:40:46.291122Z","shell.execute_reply.started":"2024-08-01T18:40:46.125331Z","shell.execute_reply":"2024-08-01T18:40:46.290317Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"transform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),  # Convert images to PyTorch tensors\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize with ImageNet statistics\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:46.292160Z","iopub.execute_input":"2024-08-01T18:40:46.292419Z","iopub.status.idle":"2024-08-01T18:40:46.297491Z","shell.execute_reply.started":"2024-08-01T18:40:46.292398Z","shell.execute_reply":"2024-08-01T18:40:46.296609Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"isic_ids = train_meta[\"isic_id\"].values\ntargets = train_meta[\"target\"].values\ntrain_hdf5 = h5py.File(data_path + \"/train-image.hdf5\", 'r')\n\ntest_isic_ids = test_meta[\"isic_id\"].values\ntest_hdf5 = h5py.File(data_path + \"/test-image.hdf5\", \"r\")","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:46.298538Z","iopub.execute_input":"2024-08-01T18:40:46.298811Z","iopub.status.idle":"2024-08-01T18:40:46.314553Z","shell.execute_reply.started":"2024-08-01T18:40:46.298789Z","shell.execute_reply":"2024-08-01T18:40:46.313731Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"train_dataset = ISICDataset(train_hdf5, isic_ids, X, targets, transform=transform)\ntest_dataset = ISICDataset(test_hdf5, test_isic_ids, test_X, transform=transform)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:46.316609Z","iopub.execute_input":"2024-08-01T18:40:46.316875Z","iopub.status.idle":"2024-08-01T18:40:46.323004Z","shell.execute_reply.started":"2024-08-01T18:40:46.316852Z","shell.execute_reply":"2024-08-01T18:40:46.322101Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=False)\ntest_dataloader = DataLoader(test_dataset, batch_size=64, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:47.132592Z","iopub.execute_input":"2024-08-01T18:40:47.132962Z","iopub.status.idle":"2024-08-01T18:40:47.137925Z","shell.execute_reply.started":"2024-08-01T18:40:47.132933Z","shell.execute_reply":"2024-08-01T18:40:47.136955Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"model = torchvision.models.efficientnet_b0()\nmodel.classifier[1] = torch.nn.Linear(model.classifier[1].in_features, 2)\nmodel.classifier.append(torch.nn.Softmax(dim=1))\nmodel.load_state_dict(torch.load('/kaggle/input/efficientnet-isic/pytorch/default/2/model_checkpoint_epoch_4.pth'))\nmodel.eval()\nmodel = model.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:47.818639Z","iopub.execute_input":"2024-08-01T18:40:47.819387Z","iopub.status.idle":"2024-08-01T18:40:48.148647Z","shell.execute_reply.started":"2024-08-01T18:40:47.819344Z","shell.execute_reply":"2024-08-01T18:40:48.147629Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"train_predictions = []\nwith torch.no_grad():\n    for images, metas, targets in train_dataloader:\n        images, metas = images.to(device), metas\n        outputs = model(images).cpu()\n        softmax = torch.nn.functional.softmax(outputs.data, dim=1)\n        predicted = softmax[:, 1]\n        train_predictions.extend(predicted.numpy())\n        \nX[\"effnet_preds\"] = train_predictions","metadata":{"execution":{"iopub.status.busy":"2024-08-01T18:40:49.461469Z","iopub.execute_input":"2024-08-01T18:40:49.462240Z","iopub.status.idle":"2024-08-01T19:02:52.480278Z","shell.execute_reply.started":"2024-08-01T18:40:49.462204Z","shell.execute_reply":"2024-08-01T19:02:52.479328Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"test_predictions = []\nwith torch.no_grad():\n    for images, metas in test_dataloader:\n        images, metas = images.to(device), metas\n        outputs = model(images).cpu()\n        softmax = torch.nn.functional.softmax(outputs.data, dim=1)\n        predicted = softmax[:, 1]\n        test_predictions.extend(predicted.numpy())\n        \ntest_X[\"effnet_preds\"] = test_predictions","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:39.749836Z","iopub.execute_input":"2024-08-01T19:10:39.750365Z","iopub.status.idle":"2024-08-01T19:10:39.839874Z","shell.execute_reply.started":"2024-08-01T19:10:39.750332Z","shell.execute_reply":"2024-08-01T19:10:39.838837Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:41.322871Z","iopub.execute_input":"2024-08-01T19:10:41.323268Z","iopub.status.idle":"2024-08-01T19:10:41.716131Z","shell.execute_reply.started":"2024-08-01T19:10:41.323238Z","shell.execute_reply":"2024-08-01T19:10:41.715210Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"full_dataset = lgb.Dataset(X, y, free_raw_data=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:43.853197Z","iopub.execute_input":"2024-08-01T19:10:43.853548Z","iopub.status.idle":"2024-08-01T19:10:43.858143Z","shell.execute_reply.started":"2024-08-01T19:10:43.853518Z","shell.execute_reply":"2024-08-01T19:10:43.857131Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"train_pool = Pool(data=X_train, label=y_train)\nval_pool = Pool(data=X_val, label=y_val)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:44.442779Z","iopub.execute_input":"2024-08-01T19:10:44.443418Z","iopub.status.idle":"2024-08-01T19:10:44.689352Z","shell.execute_reply.started":"2024-08-01T19:10:44.443384Z","shell.execute_reply":"2024-08-01T19:10:44.688514Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"catboost = CatBoostClassifier(iterations=1000,  # Number of boosting iterations\n                           learning_rate=0.1,  # Step size shrinkage\n                           depth=9,  # Depth of trees\n#                            cat_features=cat_features,  # Categorical features\n#                            loss_function='Logloss',  # Objective function\n                           eval_metric='AUC',  # Metric for evaluation\n                           early_stopping_rounds=100,\n                           random_seed=42) ","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:46.567596Z","iopub.execute_input":"2024-08-01T19:10:46.568231Z","iopub.status.idle":"2024-08-01T19:10:46.575335Z","shell.execute_reply.started":"2024-08-01T19:10:46.568198Z","shell.execute_reply":"2024-08-01T19:10:46.574286Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"catboost.fit(train_pool, eval_set=val_pool, verbose=100)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:10:47.184948Z","iopub.execute_input":"2024-08-01T19:10:47.185874Z","iopub.status.idle":"2024-08-01T19:11:24.431313Z","shell.execute_reply.started":"2024-08-01T19:10:47.185839Z","shell.execute_reply":"2024-08-01T19:11:24.430385Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"0:\ttest: 0.7595704\tbest: 0.7595704 (0)\ttotal: 254ms\tremaining: 4m 13s\n100:\ttest: 0.9744572\tbest: 0.9744572 (100)\ttotal: 16.1s\tremaining: 2m 23s\n200:\ttest: 0.9729769\tbest: 0.9750201 (127)\ttotal: 31.7s\tremaining: 2m 6s\nStopped by overfitting detector  (100 iterations wait)\n\nbestTest = 0.9750201173\nbestIteration = 127\n\nShrink model to first 128 iterations.\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"<catboost.core.CatBoostClassifier at 0x797fdbc43a30>"},"metadata":{}}]},{"cell_type":"code","source":"cat_pred = catboost.predict_proba(test_X)[:, 1]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:11:24.432974Z","iopub.execute_input":"2024-08-01T19:11:24.433259Z","iopub.status.idle":"2024-08-01T19:11:24.445257Z","shell.execute_reply.started":"2024-08-01T19:11:24.433235Z","shell.execute_reply":"2024-08-01T19:11:24.444409Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"lgb_params = {\n    'objective': 'binary',\n    'metric': 'none',\n    'verbose': -1,\n    'learning_rate': 0.01,\n    'pos_bagging_fraction': 0.75,\n    'neg_bagging_fraction': 0.05,\n    'bagging_freq': 1,\n    'lambda_l1': 1.0,\n    'lambda_l2': 0.1\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:11:24.446354Z","iopub.execute_input":"2024-08-01T19:11:24.446646Z","iopub.status.idle":"2024-08-01T19:11:24.452836Z","shell.execute_reply.started":"2024-08-01T19:11:24.446602Z","shell.execute_reply":"2024-08-01T19:11:24.451870Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"kfold = StratifiedKFold()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:11:24.454945Z","iopub.execute_input":"2024-08-01T19:11:24.455244Z","iopub.status.idle":"2024-08-01T19:11:24.462029Z","shell.execute_reply.started":"2024-08-01T19:11:24.455219Z","shell.execute_reply":"2024-08-01T19:11:24.461045Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"cv_results = lgb.cv(\n    lgb_params,\n    full_dataset,\n    folds=kfold.split(X, y),\n    feval=pauc_80,\n    num_boost_round=1000,\n    callbacks=[\n        lgb.early_stopping(stopping_rounds=50), \n        lgb.log_evaluation(20)\n    ],\n    stratified=True,\n    return_cvbooster=True,\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:11:24.463184Z","iopub.execute_input":"2024-08-01T19:11:24.463537Z","iopub.status.idle":"2024-08-01T19:13:55.701699Z","shell.execute_reply.started":"2024-08-01T19:11:24.463503Z","shell.execute_reply":"2024-08-01T19:13:55.700581Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Training until validation scores don't improve for 50 rounds\n[20]\tcv_agg's valid pauc_80: 0.171263 + 0.00429644\n[40]\tcv_agg's valid pauc_80: 0.17296 + 0.00449725\n[60]\tcv_agg's valid pauc_80: 0.174964 + 0.00485043\n[80]\tcv_agg's valid pauc_80: 0.175218 + 0.00476439\n[100]\tcv_agg's valid pauc_80: 0.17528 + 0.00506782\n[120]\tcv_agg's valid pauc_80: 0.17591 + 0.00491024\n[140]\tcv_agg's valid pauc_80: 0.176435 + 0.00470329\n[160]\tcv_agg's valid pauc_80: 0.176672 + 0.0045561\n[180]\tcv_agg's valid pauc_80: 0.176958 + 0.00469917\n[200]\tcv_agg's valid pauc_80: 0.17741 + 0.00442391\n[220]\tcv_agg's valid pauc_80: 0.17757 + 0.00435137\n[240]\tcv_agg's valid pauc_80: 0.177705 + 0.00422672\n[260]\tcv_agg's valid pauc_80: 0.178 + 0.00401382\n[280]\tcv_agg's valid pauc_80: 0.178126 + 0.00399942\n[300]\tcv_agg's valid pauc_80: 0.17832 + 0.00392597\n[320]\tcv_agg's valid pauc_80: 0.178547 + 0.00385521\n[340]\tcv_agg's valid pauc_80: 0.178689 + 0.00385631\n[360]\tcv_agg's valid pauc_80: 0.178584 + 0.0039295\n[380]\tcv_agg's valid pauc_80: 0.178628 + 0.00392714\nEarly stopping, best iteration is:\n[343]\tcv_agg's valid pauc_80: 0.178697 + 0.00385985\n","output_type":"stream"}]},{"cell_type":"code","source":"# make test predictions\nboosters = cv_results['cvbooster'].boosters\npred_per_cv = [b.predict(test_X) for b in boosters]\nlgbm_pred_average = np.array(pred_per_cv).mean(axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:13:55.703118Z","iopub.execute_input":"2024-08-01T19:13:55.703462Z","iopub.status.idle":"2024-08-01T19:13:55.719677Z","shell.execute_reply.started":"2024-08-01T19:13:55.703434Z","shell.execute_reply":"2024-08-01T19:13:55.718811Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"pred_average = (cat_pred + lgbm_pred_average) / 2","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:13:55.720975Z","iopub.execute_input":"2024-08-01T19:13:55.721291Z","iopub.status.idle":"2024-08-01T19:13:55.725917Z","shell.execute_reply.started":"2024-08-01T19:13:55.721267Z","shell.execute_reply":"2024-08-01T19:13:55.724906Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"df_submission = pd.DataFrame({'isic_id':test_isic_ids, 'target':pred_average})","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:13:55.727477Z","iopub.execute_input":"2024-08-01T19:13:55.727802Z","iopub.status.idle":"2024-08-01T19:13:55.734016Z","shell.execute_reply.started":"2024-08-01T19:13:55.727776Z","shell.execute_reply":"2024-08-01T19:13:55.733034Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"df_submission","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:13:55.735380Z","iopub.execute_input":"2024-08-01T19:13:55.735669Z","iopub.status.idle":"2024-08-01T19:13:55.750258Z","shell.execute_reply.started":"2024-08-01T19:13:55.735645Z","shell.execute_reply":"2024-08-01T19:13:55.749395Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"        isic_id    target\n0  ISIC_0015657  0.000214\n1  ISIC_0015729  0.000138\n2  ISIC_0015740  0.000260","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>isic_id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ISIC_0015657</td>\n      <td>0.000214</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ISIC_0015729</td>\n      <td>0.000138</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ISIC_0015740</td>\n      <td>0.000260</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_submission.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}