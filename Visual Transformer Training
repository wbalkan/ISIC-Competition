{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":63056,"databundleVersionId":9094797,"sourceType":"competition"},{"sourceId":81200,"sourceType":"modelInstanceVersion","modelInstanceId":68237,"modelId":93416},{"sourceId":81381,"sourceType":"modelInstanceVersion","modelInstanceId":68390,"modelId":93570},{"sourceId":84733,"sourceType":"modelInstanceVersion","modelInstanceId":71178,"modelId":96173},{"sourceId":85268,"sourceType":"modelInstanceVersion","modelInstanceId":71178,"modelId":96173},{"sourceId":87634,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":73605,"modelId":98447}],"dockerImageVersionId":30747,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-29T14:26:00.754506Z","iopub.execute_input":"2024-07-29T14:26:00.75485Z","iopub.status.idle":"2024-07-29T14:26:01.725487Z","shell.execute_reply.started":"2024-07-29T14:26:00.75482Z","shell.execute_reply":"2024-07-29T14:26:01.724542Z"}}},{"cell_type":"code","source":"import numpy as np\nfrom torch.utils.data import Dataset, DataLoader, random_split, WeightedRandomSampler, Subset\nfrom torchvision import transforms\nimport pandas as pd\nimport h5py\nimport torch\nimport torchvision\nfrom torch.optim.lr_scheduler import StepLR\nimport lightgbm as lgb\nfrom PIL import Image\nfrom io import BytesIO\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, precision_score, recall_score\nfrom sklearn.metrics import ConfusionMatrixDisplay, f1_score\nimport re\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:21.531344Z","iopub.execute_input":"2024-08-02T18:16:21.531773Z","iopub.status.idle":"2024-08-02T18:16:28.076076Z","shell.execute_reply.started":"2024-08-02T18:16:21.531738Z","shell.execute_reply":"2024-08-02T18:16:28.074922Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# for model in dir(torchvision.models):\n#     print(model)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:28.078334Z","iopub.execute_input":"2024-08-02T18:16:28.079332Z","iopub.status.idle":"2024-08-02T18:16:28.084188Z","shell.execute_reply.started":"2024-08-02T18:16:28.079289Z","shell.execute_reply":"2024-08-02T18:16:28.083014Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using device:\", device)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:28.085781Z","iopub.execute_input":"2024-08-02T18:16:28.086875Z","iopub.status.idle":"2024-08-02T18:16:28.137027Z","shell.execute_reply.started":"2024-08-02T18:16:28.086841Z","shell.execute_reply":"2024-08-02T18:16:28.135749Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"def score(solution: np.ndarray, submission: np.ndarray, min_tpr: float=0.80) -> float:\n    v_gt = abs(solution-1)\n    v_pred = np.array([1.0 - x for x in submission])\n    max_fpr = abs(1-min_tpr)\n    partial_auc_scaled = roc_auc_score(v_gt, v_pred, max_fpr=max_fpr)\n    # change scale from [0.5, 1.0] to [0.5 * max_fpr**2, max_fpr]\n    # https://math.stackexchange.com/questions/914823/shift-numbers-into-a-different-range\n    partial_auc = 0.5 * max_fpr**2 + (max_fpr - 0.5 * max_fpr**2) / (1.0 - 0.5) * (partial_auc_scaled - 0.5)\n    \n    return(partial_auc)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:30.138148Z","iopub.execute_input":"2024-08-02T18:16:30.139248Z","iopub.status.idle":"2024-08-02T18:16:30.146412Z","shell.execute_reply.started":"2024-08-02T18:16:30.139212Z","shell.execute_reply":"2024-08-02T18:16:30.145252Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"def pauc_80(preds, data):\n    score_value = score(data.get_label(), preds, min_tpr=0.8)\n    return 'pauc_80', score_value, True","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:30.595995Z","iopub.execute_input":"2024-08-02T18:16:30.596792Z","iopub.status.idle":"2024-08-02T18:16:30.602446Z","shell.execute_reply.started":"2024-08-02T18:16:30.596752Z","shell.execute_reply":"2024-08-02T18:16:30.601125Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"class ISICDataset(Dataset):\n    def __init__(self, hdf5_file, isic_ids, metadata, targets=None, transform=None):\n        self.hdf5_file = hdf5_file\n        self.isic_ids = isic_ids\n        self.targets = targets\n        self.transform = transform\n        self.metadata = metadata\n        \n    def __len__(self):\n        return len(self.isic_ids)\n    \n    def __getitem__(self, idx):\n        isic_id = self.isic_ids[idx]\n        image = Image.open(BytesIO(self.hdf5_file[isic_id][()])) # convert byte array to PIL image\n        meta = torch.tensor(self.metadata.iloc[idx].tolist(), dtype=torch.float32)\n        if self.transform:\n            image = self.transform(image)\n        if self.targets is not None:\n            target = self.targets[idx]\n            return image, meta, target\n        else:\n            return image, meta\n        \n    def get_target(self, idx):\n        return int(self.targets[idx])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:30.987326Z","iopub.execute_input":"2024-08-02T18:16:30.988151Z","iopub.status.idle":"2024-08-02T18:16:30.998825Z","shell.execute_reply.started":"2024-08-02T18:16:30.988117Z","shell.execute_reply":"2024-08-02T18:16:30.997524Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"num_cols = [\n    'age_approx',\n    'clin_size_long_diam_mm',\n    'tbp_lv_A', 'tbp_lv_Aext',\n    'tbp_lv_B', 'tbp_lv_Bext',\n    'tbp_lv_C', 'tbp_lv_Cext', \n    'tbp_lv_H', 'tbp_lv_Hext',\n    'tbp_lv_L', 'tbp_lv_Lext',\n    'tbp_lv_areaMM2',\n    'tbp_lv_area_perim_ratio',\n    'tbp_lv_color_std_mean',\n    'tbp_lv_deltaA', 'tbp_lv_deltaB',\n    'tbp_lv_deltaL', 'tbp_lv_deltaLB',\n    'tbp_lv_deltaLBnorm',\n    'tbp_lv_eccentricity',\n    'tbp_lv_minorAxisMM',\n    'tbp_lv_nevi_confidence',\n    'tbp_lv_norm_border',\n    'tbp_lv_norm_color', 'tbp_lv_perimeterMM',\n    'tbp_lv_radial_color_std_max',\n    'tbp_lv_stdL', 'tbp_lv_stdLExt',\n    'tbp_lv_symm_2axis', 'tbp_lv_symm_2axis_angle',\n    'tbp_lv_x', 'tbp_lv_y', 'tbp_lv_z'\n]\n\ncat_cols = ['sex', 'anatom_site_general', 'image_type', 'tbp_tile_type', 'tbp_lv_location', 'tbp_lv_location_simple']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:31.439227Z","iopub.execute_input":"2024-08-02T18:16:31.440100Z","iopub.status.idle":"2024-08-02T18:16:31.446934Z","shell.execute_reply.started":"2024-08-02T18:16:31.440059Z","shell.execute_reply":"2024-08-02T18:16:31.445832Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"data_path = \"/kaggle/input/isic-2024-challenge/\"\ntrain_path = data_path + \"train-metadata.csv\"\ntest_path = data_path + \"test-metadata.csv\"\n\ntrain_meta = pd.read_csv(train_path)\ntest_meta = pd.read_csv(test_path)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:32.039445Z","iopub.execute_input":"2024-08-02T18:16:32.040312Z","iopub.status.idle":"2024-08-02T18:16:37.789198Z","shell.execute_reply.started":"2024-08-02T18:16:32.040242Z","shell.execute_reply":"2024-08-02T18:16:37.788123Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_184/2499741512.py:5: DtypeWarning: Columns (51,52) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_meta = pd.read_csv(train_path)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_X = train_meta.filter(num_cols + cat_cols)\ntest_X = test_meta.filter(num_cols + cat_cols)\ntrain_X = pd.get_dummies(train_X, columns=cat_cols)\ntest_X = pd.get_dummies(test_X, columns=cat_cols)\ntrain_X = train_X.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntest_X = test_X.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntrain_X, test_X = train_X.align(test_X, join='outer', axis=1, fill_value=0)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:37.791549Z","iopub.execute_input":"2024-08-02T18:16:37.791965Z","iopub.status.idle":"2024-08-02T18:16:38.408212Z","shell.execute_reply.started":"2024-08-02T18:16:37.791932Z","shell.execute_reply":"2024-08-02T18:16:38.406904Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"transform = transforms.Compose([\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomRotation(60),\n    transforms.ColorJitter(brightness=0.5, contrast=0.5, saturation=0.5),\n    transforms.RandomResizedCrop(224),\n#     transforms.Resize((224, 224)),  # Resize images to 224x224 pixels\n    transforms.ToTensor(),  # Convert images to PyTorch tensors\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize with ImageNet statistics\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:38.409629Z","iopub.execute_input":"2024-08-02T18:16:38.409997Z","iopub.status.idle":"2024-08-02T18:16:38.417141Z","shell.execute_reply.started":"2024-08-02T18:16:38.409966Z","shell.execute_reply":"2024-08-02T18:16:38.415973Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"isic_ids = train_meta[\"isic_id\"].values\ntargets = train_meta[\"target\"].values\ntrain_hdf5 = h5py.File(data_path + \"/train-image.hdf5\", 'r')\n\ntest_isic_ids = test_meta[\"isic_id\"].values\ntest_hdf5 = h5py.File(data_path + \"/test-image.hdf5\", \"r\")","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:38.419790Z","iopub.execute_input":"2024-08-02T18:16:38.420209Z","iopub.status.idle":"2024-08-02T18:16:38.442269Z","shell.execute_reply.started":"2024-08-02T18:16:38.420177Z","shell.execute_reply":"2024-08-02T18:16:38.441073Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"train_dataset = ISICDataset(train_hdf5, isic_ids, train_X, targets, transform=transform)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:38.443587Z","iopub.execute_input":"2024-08-02T18:16:38.444045Z","iopub.status.idle":"2024-08-02T18:16:38.456079Z","shell.execute_reply.started":"2024-08-02T18:16:38.444011Z","shell.execute_reply":"2024-08-02T18:16:38.455001Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"test_dataset = ISICDataset(test_hdf5, test_isic_ids, test_X, transform=transform)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:40.210347Z","iopub.execute_input":"2024-08-02T18:16:40.210785Z","iopub.status.idle":"2024-08-02T18:16:40.216192Z","shell.execute_reply.started":"2024-08-02T18:16:40.210751Z","shell.execute_reply":"2024-08-02T18:16:40.214888Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"train_size = int(0.8 * len(train_dataset))\ntest_size = len(train_dataset) - train_size\n\n# Set random seed for reproducibility\ntorch.manual_seed(42)\n\ntrain_set, val_set = random_split(train_dataset, [train_size, test_size])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:41.172832Z","iopub.execute_input":"2024-08-02T18:16:41.173232Z","iopub.status.idle":"2024-08-02T18:16:41.226852Z","shell.execute_reply.started":"2024-08-02T18:16:41.173200Z","shell.execute_reply":"2024-08-02T18:16:41.225667Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"train_labels = [train_set.dataset.get_target(i) for i in train_set.indices]\n\ntrain_class_counts = {}\nfor label in train_labels:\n    if label in train_class_counts:\n        train_class_counts[label] += 1\n    else:\n        train_class_counts[label] = 1\ntrain_total = sum(train_class_counts.values())\nclass_weights = [train_total / train_class_counts[count]  for count in train_class_counts]\nprint(train_class_counts)\n\nsample_weights = torch.tensor([class_weights[train_set.dataset.get_target(i)] for i in train_set.indices])\nrandom_oversampler = WeightedRandomSampler(weights=sample_weights, num_samples=len(train_set), replacement=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:42.432633Z","iopub.execute_input":"2024-08-02T18:16:42.433077Z","iopub.status.idle":"2024-08-02T18:16:43.057560Z","shell.execute_reply.started":"2024-08-02T18:16:42.433042Z","shell.execute_reply":"2024-08-02T18:16:43.056441Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"{0: 320524, 1: 323}\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nprint(f'Number of CPU cores: {os.cpu_count()}')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:43.342847Z","iopub.execute_input":"2024-08-02T18:16:43.343290Z","iopub.status.idle":"2024-08-02T18:16:43.348778Z","shell.execute_reply.started":"2024-08-02T18:16:43.343230Z","shell.execute_reply":"2024-08-02T18:16:43.347542Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Number of CPU cores: 4\n","output_type":"stream"}]},{"cell_type":"code","source":"train_loader = DataLoader(train_set, batch_size=32, sampler=random_oversampler, num_workers=2, pin_memory=True)\nval_loader = DataLoader(val_set, batch_size=32, shuffle=False, num_workers=2, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:44.982908Z","iopub.execute_input":"2024-08-02T18:16:44.983330Z","iopub.status.idle":"2024-08-02T18:16:44.991827Z","shell.execute_reply.started":"2024-08-02T18:16:44.983298Z","shell.execute_reply":"2024-08-02T18:16:44.990784Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"test_loader = DataLoader(test_dataset, batch_size=64)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:45.837364Z","iopub.execute_input":"2024-08-02T18:16:45.838163Z","iopub.status.idle":"2024-08-02T18:16:45.843074Z","shell.execute_reply.started":"2024-08-02T18:16:45.838127Z","shell.execute_reply":"2024-08-02T18:16:45.842004Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"model = torchvision.models.vit_b_16()\nmodel.heads.head = torch.nn.Linear(model.heads.head.in_features, 2)\nmodel.heads.append(torch.nn.Softmax(dim=1))\nmodel = model.to(device)\n\nmodel.load_state_dict(torch.load('/kaggle/input/vit-isic/pytorch/default/1/vit_checkpoint_epoch_3.pth'))","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:48.644640Z","iopub.execute_input":"2024-08-02T18:16:48.645045Z","iopub.status.idle":"2024-08-02T18:16:50.583782Z","shell.execute_reply.started":"2024-08-02T18:16:48.645015Z","shell.execute_reply":"2024-08-02T18:16:50.582656Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"<All keys matched successfully>"},"metadata":{}}]},{"cell_type":"code","source":"def train_and_validate(model, train_loader, val_loader, optimizer, scheduler, loss_func, device, epochs=10, patience=10, save_path='best_model.pth'):\n    # Move model to the device being used\n    model = model.to(device)\n    \n    # To store the training and validation loss for plotting or analysis\n    history = {'train_loss': [], 'val_loss': [], 'train_accuracy': [], 'val_accuracy': [], 'train_f1': [], 'val_f1': []}\n\n    best_val_loss = float('inf')\n    patience_counter = 0  # Counter for the early stopping\n\n    for epoch in range(epochs):\n        model.train()\n        train_loss = 0.0\n        correct_train = 0\n        total_train = 0\n        train_preds, train_targets = [], []\n\n        for images, metas, labels in tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{epochs} - Training\"):\n            images, labels = images.to(device), labels.to(device)\n            optimizer.zero_grad()\n            outputs = model(images)\n            loss = loss_func(outputs, labels)\n            loss.backward()\n            optimizer.step()\n\n            train_loss += loss.item() * images.size(0)\n            _, predicted = torch.max(outputs.data, 1)\n            correct_train += (predicted == labels).sum().item()\n            total_train += labels.size(0)\n\n            train_preds.extend(predicted.cpu().numpy())\n            train_targets.extend(labels.cpu().numpy())\n\n        train_accuracy = 100 * correct_train / total_train\n        train_f1 = f1_score(train_targets, train_preds, average='weighted')\n        train_pauc = score(np.array(train_targets), train_preds)\n        train_precision = precision_score(train_targets, train_preds)\n        train_recall = recall_score(train_targets, train_preds)\n        \n        epoch_train_loss = train_loss / len(train_loader.dataset)\n        history['train_loss'].append(epoch_train_loss)\n        history['train_accuracy'].append(train_accuracy)\n        history['train_f1'].append(train_f1)\n\n        # Scheduler step (commonly after training step, can be adjusted as per scheduler type)\n        scheduler.step()\n\n        model.eval()\n        val_loss = 0.0\n        correct_val = 0\n        total_val = 0\n        val_preds, val_targets = [], []\n\n        with torch.no_grad():\n            for images, metas, labels in tqdm(val_loader, desc=f\"Epoch {epoch + 1}/{epochs} - Validation\"):\n                images, labels = images.to(device), labels.to(device)\n                outputs = model(images)\n                loss = loss_func(outputs, labels)\n\n                val_loss += loss.item() * images.size(0)\n                _, predicted = torch.max(outputs.data, 1)\n                correct_val += (predicted == labels).sum().item()\n                total_val += labels.size(0)\n\n                val_preds.extend(predicted.cpu().numpy())\n                val_targets.extend(labels.cpu().numpy())\n\n        val_accuracy = 100 * correct_val / total_val\n        val_f1 = f1_score(val_targets, val_preds, average='weighted')\n        val_pauc = score(np.array(val_targets), val_preds)\n        val_precision = precision_score(val_targets, val_preds)\n        val_recall = recall_score(val_targets, val_preds)\n        \n        epoch_val_loss = val_loss / len(val_loader.dataset)\n        history['val_loss'].append(epoch_val_loss)\n        history['val_accuracy'].append(val_accuracy)\n        history['val_f1'].append(val_f1)\n\n        print(f'Epoch [{epoch+1}/{epochs}], Train Loss: {epoch_train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%, Train F1: {train_f1:.4f}, Validation Loss: {epoch_val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%, Validation F1: {val_f1:.4f}')\n        print(f'Train pAUC: {train_pauc}, Train Precision: {train_precision}, Train Recall: {train_recall}')\n        print(f'Validation pAUC: {val_pauc}, Validation Precision: {val_precision}, Validation Recall: {val_recall}')\n        \n        # Check for improvement in validation loss\n        if epoch_val_loss < best_val_loss:\n            best_val_loss = epoch_val_loss\n            patience_counter = 0\n            torch.save(model.state_dict(), save_path)  # Save the best model\n        else:\n            patience_counter += 1\n            if patience_counter >= patience:\n                print(f\"Stopping early after {epoch + 1} epochs due to no improvement in validation loss.\")\n                model.load_state_dict(torch.load(save_path))  # Load the best model weights\n                break\n                \n        checkpoint_path = f'model_checkpoint_epoch_{epoch + 1}.pth'\n        torch.save(model.state_dict(), checkpoint_path)\n        print(f'Saved checkpoint: {checkpoint_path}')\n\n    return history","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:16:59.280378Z","iopub.execute_input":"2024-08-02T18:16:59.281072Z","iopub.status.idle":"2024-08-02T18:16:59.319880Z","shell.execute_reply.started":"2024-08-02T18:16:59.281039Z","shell.execute_reply":"2024-08-02T18:16:59.318616Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"optimizer = torch.optim.Adam(model.parameters())\nscheduler = StepLR(optimizer, step_size=7, gamma=0.1)\nloss_func = torch.nn.CrossEntropyLoss(weight=torch.Tensor([1, 100]).to(device))","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:17:01.074147Z","iopub.execute_input":"2024-08-02T18:17:01.074564Z","iopub.status.idle":"2024-08-02T18:17:01.083096Z","shell.execute_reply.started":"2024-08-02T18:17:01.074533Z","shell.execute_reply":"2024-08-02T18:17:01.081938Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"history = train_and_validate(model, train_loader, val_loader, optimizer, scheduler, loss_func, device)\n\n\n# load best model for submission\n# model.load_state_dict(torch.load('/kaggle/input/efficientnet-isic/pytorch/default/2/model_checkpoint_epoch_4.pth'))","metadata":{"execution":{"iopub.status.busy":"2024-08-02T18:17:01.978062Z","iopub.execute_input":"2024-08-02T18:17:01.978485Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"Epoch 1/10 - Training:  51%|█████     | 5099/10027 [52:12<50:26,  1.63it/s]  IOPub message rate exceeded.\nThe notebook server will temporarily stop sending output\nto the client in order to avoid crashing it.\nTo change this limit, set the config variable\n`--NotebookApp.iopub_msg_rate_limit`.\n\nCurrent values:\nNotebookApp.iopub_msg_rate_limit=1000.0 (msgs/sec)\nNotebookApp.rate_limit_window=3.0 (secs)\n\nEpoch 1/10 - Training: 100%|██████████| 10027/10027 [1:42:37<00:00,  1.63it/s]\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nEpoch 1/10 - Validation:  69%|██████▊   | 1723/2507 [05:23<02:26,  5.34it/s]","output_type":"stream"}]},{"cell_type":"code","source":"model.eval()\n\npredictions = []\nwith torch.no_grad():\n    for images, metas in test_loader:\n        images, metas = images.to(device), metas\n        outputs = model(images).cpu()\n        softmax = torch.nn.functional.softmax(outputs.data, dim=1)\n        predicted = softmax[:, 1]\n        predictions.extend(predicted.numpy())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_submission = pd.DataFrame({'isic_id':test_isic_ids, 'target':predictions})\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_submission","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_submission.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}